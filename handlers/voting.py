from aiogram import F
from create_entities import *
from aiogram.utils import markdown
from misc import *


@dp.message(F.text.lower().startswith('–≥–æ–ª–æ—Å –∑–∞ –±–ª—é–¥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –±–∏–∑–Ω–µ—Å'))
async def voting_handler(message: types.Message):
    await message.answer(
        text='üìä –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ:',
        reply_markup=create_voting_keyboard()
    )


@dp.callback_query(F.data.startswith('vote_'))
async def choose_lunch_voting_handler(callback: types.CallbackQuery):
    session = create_session()
    id = callback.data.split('_')[-1]
    # param = session.get(AdviceParams, id).param
    # advices = [i.advice for i in session.query(Advices).filter(Advices.param == id)]
    await callback.message.answer(
        text=markdown.text(
            '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≥–æ–ª–æ—Å! üôè',
            '–û–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–µ–π. üåü',
            sep='\n'
        ),
    )