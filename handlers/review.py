from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils import markdown
from create_entities import *
from misc import *


class ReviewState(StatesGroup):
    lunch = State()
    review = State()


@dp.message(F.text.lower().startswith('–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–µ'))
async def choose_lunch_review_handler(message: types.Message, state: FSMContext):
    await state.set_state(ReviewState.lunch)
    await message.answer(
        text='ü•ò –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–µ–Ω—Å-–ª–∞–Ω—á, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úç üìù:',
        reply_markup=create_review_keyboard()
    )


@dp.callback_query(F.data.startswith('rev_'), ReviewState.lunch)
async def input_review_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(lunch=callback.data.split('_')[-1])
    await state.set_state(ReviewState.review)
    await callback.message.answer(
        text=markdown.text(
            '‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤: ',
        )
    )


@dp.message(ReviewState.review)
async def review_handler(message: types.Message, state: FSMContext):
    data = await state.update_data(review=message.text)
    review, lunch = data['review'], data['lunch']
    print(review, lunch)
    await state.clear()
    await message.answer(
        text=markdown.text(
            '–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω! ‚úÖ',
            '–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∫—É—Å–Ω–æ–µ —ç—Ç–æ –±–ª—é–¥–æ) üç±',
            '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –Ω–∞—Å –ª—É—á—à–µ! üôè üåü',
            sep='\n'
        )
    )
